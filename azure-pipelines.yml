trigger:
- master
- dev

pool:
  vmImage: 'macOS-latest'
steps:

# - task: NodeTool@0
#   inputs:
#     versionSpec: '10.14'
#   displayName: 'Install Node.js'

# Download Secure File for Android
# Note: if multiple secure files are downloaded... variable name will change and break pipeline
- task: DownloadSecureFile@1
  displayName: 'download android keystore file'
  inputs:
    secureFile: release-key.keystore


- task: CmdLine@2
  displayName: 'Install Homebrew'
  inputs:
    script: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

- task: CmdLine@2
  displayName: 'Install Android Studio'
  inputs:
    script: |
      brew install node
      brew tap AdoptOpenJDK/openjdk
      brew install --cask adoptopenjdk15
      brew install gradle


- task: CmdLine@2
  displayName: 'Update environment data'
  inputs:
    script: |
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      brew tap homebrew/cask-versions
      brew update
      brew tap homebrew/cask
      brew tap adoptopenjdk/openjdk
      brew install adoptopenjdk/openjdk/adoptopenjdk8

- task: CmdLine@2
  displayName: 'Install Nativescript'
  inputs:
    script: |
      echo 

- task: CmdLine@2
  displayName: 'Install Nativescript'
  inputs:
    script: |
      pip install six
      npm install -g nativescript

- task: CmdLine@2
  displayName: 'Test if environment is nativescript is ready'
  inputs:
    script: |
      ns doctor android

- task: CmdLine@2
  displayName: 'Install dependencies'
  inputs:
    script: |
      npm install

# - task: CmdLine@2
#   displayName: 'Configure Android emulator'
#   inputs:
#     script: |
#       echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
#       echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k 'system-images;android-27;google_apis;x86' --force
#       $ANDROID_HOME/emulator/emulator -list-avds
#       echo "adb devices list"
#       $ANDROID_HOME/platform-tools/adb devices

- task: CmdLine@2
  displayName: 'Build Android App'
  inputs:
    script: |
      export ANDROID_HOME=$HOME/Library/Android/sdk
      export PATH=$PATH:$ANDROID_HOME/platform-tools
      export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
      ns platform remove android
      ns platform add android
      ns build android --env.production --release --key-store-path $DOWNLOADSECUREFILE_SECUREFILEPATH --key-store-password $(KEY_STORE_PASS) --key-store-alias $(APP_ALIAS) --key-store-alias-password $(KEY_STORE_PASS) --bundle --copy-to $BUILD_SOURCESDIRECTORY
  env:
    KEYSTORE_PASSWORD: $(KEY_STORE_PASS)

# - task: AndroidSigning@3
#   inputs:
#     apkFiles: '**/*.apk'
#     apksign: true
#     apksignerKeystoreFile: release-key.keystore
#     apksignerKeystorePassword: $(KEY_STORE_PASS)
#     apksignerKeystoreAlias: $(APP_ALIAS)
#     apksignerKeyPassword: $(KEY_STORE_PASS)
#     zipalign: false

- task: CopyFiles@2
  displayName: 'Copy Signed APK'
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(build.artifactStagingDirectory)'
    OverWrite: true
    flattenFolders: true

